generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "app"), vector]
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model chat_history {
  id         Int      @id @default(autoincrement())
  session_id String   @db.VarChar(255)
  message    Json
  created_at DateTime @default(now())
}

model documents {
  id         BigInt                 @id @default(autoincrement())
  content    String?
  metadata   Json?
  embedding  Unsupported("vector")?
  created_at DateTime?              @default(now()) @db.Timestamp(6)
}

model document_metadata {
  id               String    @id
  title            String?
  url              String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  path             String?
  last_modified_by String?
  last_modified_at DateTime? @db.Timestamp(6)
}

enum Role {
  USER
  ADMIN
  MOD
}